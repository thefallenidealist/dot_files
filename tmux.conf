# created 090907_01:02
# modified 091225_2243
# actually started using 160730
# by Johnny Sorocil, beerware licenced

#				generic settings											{{{
###############################################################################
set -g mouse on
#set -g mouse off 	# normal mouse copy&paste without holding shift key, scrolling is little uglier (as in xterm/GNU screen)

set -g default-terminal "xterm"
set -g set-titles on					# set an xterm title
set -g set-titles-string "#S [#h] #W"	# session-name [host-short] program
# don't rename windows automatically when processes change (useful in a case of high CPU usage)
# set -g allow-rename off
set -g allow-rename on

set -g base-index 1			# start window indexing at one instead of zero
set -g renumber-windows on	# auto renumber windows, so there is no gaps (no more 1 2 3 6 7)

set -s escape-time 0			# Remove delay when pressing esc in Vim
set -g history-limit 100000
set -g display-time 2000		# timeout for messages [ms]

set -gw xterm-keys on	# enable forwarding Shift-arrow keys (useful in Vim cmd mode)

# set -g default-terminal "screen-256color"
# set -g pane-border-status top		# enable titles for every pane/split
############################################################################}}}
#				keyboard shortcuts - generic								{{{
###############################################################################
# keyboard shortcuts help 			{{{
# bind is alias for bind-key
# bind -T <something>	bind without <prefix>
# bind -t {vi-edit,emacs-edit,vi-choice,emacs-choice,vi-copy,emacs-copy)
# bind -r
# bind -n	alias for "bind -T root"

# TL;DR:	bind -n C-t new-tab			# Ctrl-t
#			bind r		reload_conf		# <prefix>r

# in shell: tmux list-keys		# see all shortcuts
################################### }}}
#unbind -a	# unbind all default keys
bind C-j send-prefix
set -g prefix C-j
#set -g prefix C-space
bind C-k send-prefix	# for multiplexed tmux sessions

bind b set status		# toggle status (tab) bar

bind r source-file ~/.tmux.conf \; display-message "Config reloaded"
#bind R refresh-client

bind x kill-pane	# kill "split"
bind X kill-window	# kill "tab"
bind c kill-pane	# kill "split"	vim-compat
bind C kill-window	# kill "tab"	vim-compat
bind q confirm-before kill-session
bind Q confirm-before kill-server

bind o resize-pane -Z \; display-message "zoom"	# toggle zoom

bind n command-prompt -I '#W' "rename-window '%%'"
bind N command-prompt -I '#S' "rename-session '%%'"

# enable same keyboard input in multiple windows
bind E set synchronize-panes \; display-message "Multiple kbd input mode toggle"

# INFO <prefix>/ is now used for copycat search
#bind / split-window -h 'exec man %%'
#bind / command-prompt "split-window 'exec man %%'"
bind '~' split-window "exec htop"
############################################################################}}}
#		keyboard shortcuts - tabs (windows)									{{{
###############################################################################
# INFO this will have funny behaviour when some process (eg. rm) is working in
# current tab
#bind -n C-t new-window -c '#{pane_current_path}'
bind -n C-t new-window -c '#{pane_current_path}'
#bind -n C-t new-window -c '#{pane_title}'	# INFO this needs shell part and tmux 2.3

bind -n C-S-T new-window -a	# open a new window after the current tab

# test
bind -n C-S-r new-window $HOME
bind -n C-S-R new-window -a



bind -n M-, prev
bind -n M-. next
bind -n M-/ last-window	# not really last, just last used window

bind -n M-< swap-window -t :-	# move "tab" to the left  Alt-Shift-,
bind -n M-> swap-window -t :+	# move "tab" to the right Alt-Shift-.

# switch panes using Alt-arrow without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# INFO default <prefix>N
bind -n M-1 select-window -t :1
bind -n M-2 select-window -t :2
bind -n M-3 select-window -t :3
bind -n M-4 select-window -t :4
bind -n M-5 select-window -t :5
bind -n M-6 select-window -t :6
bind -n M-7 select-window -t :7
bind -n M-8 select-window -t :8
bind -n M-9 select-window -t :9
#bind -n M-0 select-window -l	# last used tab
bind -n M-0 select-window -t {end}
############################################################################}}}
#		keyboard shortcuts - splits (panes)									{{{
###############################################################################
# old keys for window splitting
unbind '"'
unbind '%'

bind s split-window -c '#{pane_current_path}'
# This doesn't have much sense, but fuck it, it works
bind v split-window -h -c '#{pane_current_path}'

# moving between panes with vim movement keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind w select-pane -l		# toggle between last and current
bind C-j select-pane -l		# previously active
bind T break-pane			# move buffer to a new tab

# resize panes with vim movement keys
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
############################################################################}}}
#		keyboard shortcuts - copy and paste									{{{
###############################################################################
setw -g mode-keys vi		# use vi keybindings
unbind [
unbind p
# TODO unbind others, not used shortcuts

bind -t vi-copy Escape cancel	# q is default, still valid
bind -t vi-choice Escape cancel	# Esc in choose-buffer mode (<prefix>space)

# Emacs shortcuts in vi-copy, just in case
bind -t vi-copy C-n cursor-down
bind -t vi-copy C-p cursor-up
bind -t vi-copy C-a start-of-line
#bind -t vi-copy C-e end-of-line	# will override C-e scroll INFO use Ctrl-Down, Ctrl-y is already used for something other than scroll

#				entering copy mode
# <prefix>[ to enter copy mode - default
bind y copy-mode		# <prefix>y to enter copy mode
bind C-y copy-mode		# <prefix>Ctrl-y to enter copy mode
#bind -n C-y copy-mode	# Ctrl-y to enter copy mode INFO this will fuckup Vim's Ctrl-y for autocomplete
bind -n C-u copy-mode	# this was shell shortcut (kill to the start of the line) but wasn't used very much

# 				selecting text in copy mode
# space
# mouse select
bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'V' select-line
bind -t vi-copy 'C-v' rectangle-toggle	# INFO works but need space after C-v

#				copying
# mouse select puts text in a buffer
# enter
# releasing mouse button
bind -t vi-copy y copy-selection							# tmux buffer
# INFO mouse + shift key									# X11 1st
bind -t vi-copy Y copy-pipe "xclip -selection clipboard -i"	# X11 2nd
bind -t vi-copy c copy-pipe "xclip -selection primary -i"	# X11 1st
bind -t vi-copy C copy-pipe "xclip -selection clipboard -i"	# X11 2nd
# TODO don't exit copy mode after yank (this is unsupported in tmux 2.3)

#				pasting
bind Space choose-buffer		# chose "history" from tmux paste buffer
bind p paste-buffer				# paste from tmux default buffer, the buffer when selecting with mouse (without shift key)
# paste X11 1st buffer (mouse select)
bind P run "xclip -o -sel clipboard | tmux load-buffer - ; tmux paste-buffer"	# better to use "clipboard" than "secondary"
# paste X11 1st buffer (not used very often, o and [ are close to p)
bind o run "xclip -o -sel primary| tmux load-buffer - ; tmux paste-buffer"
bind [ run "xclip -o -sel primary| tmux load-buffer - ; tmux paste-buffer"
# TODO ^ maybe it'll work without using shell

# copy from vim to tmux buffer without entering tmux copy mode
#bind O load-buffer /tmp/vim_buffer \; paste-buffer # XXX shortcut used for plugin
bind O load-buffer /tmp/vim_buffer \; paste-buffer # XXX shortcut used for plugin

# TODO " for named buffers
############################################################################}}}
#		mouse																{{{
###############################################################################
bind m set -g mouse on  \; display-message	"Mouse ON"
bind M set -g mouse off \; display-message	"Mouse OFF"
############################################################################}}}
# view URL (needs urlview package), multiple steps need to open URL
bind u capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'
# TODO tmux-open plugin
###############################################################################
#				status bar													{{{
###############################################################################
# started as CP from vim-airline plugin with some minor changes
set -g status on
set -g status-interval 1
set -g status-justify left
set -g status-keys emacs
set -g status-left-length 100
set -g status-left-style default
set -g status-position bottom
set -g status-right-length 100
set -g status-right-style default
set -g status-style fg=black,bg=colour234	# otherwise the window bar bg would be green

# set -g window-style default
# set -g window-status-activity-style fg=colour190,bg=colour234
# set -g window-status-bell-style reverse
# #set -g window-status-current-style default
# #set -g window-status-last-style default
# set -g window-status-separator ""
# set -g window-status-style fg=colour85,bg=colour234

COLOR_STATUS_BG="colour234"
COLOR_STATUS_LEFT_BG="colour33"
COLOR_STATUS_LEFT_FG="colour0"		# black
COLOR_STATUS_RIGHT_BG="colour238"
COLOR_STATUS_RIGHT_FG="colour15"	# white
COLOR_WINDOW_ACTIVE_BG="colour190"	# default was 238
COLOR_WINDOW_ACTIVE_FG="colour232"
COLOR_POWER_BG=$COLOR_STATUS_RIGHT_BG
COLOR_STATUS_TTY_BG="colour202"
#COLOR_STATUS_TTY_BG="colour88"
COLOR_STATUS_TTY_FG="colour15"
COLOR_LAST_WINDOW="colour15"

# active "tab"
set -g window-status-current-format "#[fg=${COLOR_STATUS_BG},bg=$COLOR_WINDOW_ACTIVE_BG,nobold,nounderscore,noitalics]#[fg=$COLOR_WINDOW_ACTIVE_FG,bg=$COLOR_WINDOW_ACTIVE_BG] #I #[fg=colour255,bg=COLOR_WINDOW_ACTIVE_BG] #W #[fg=$COLOR_WINDOW_ACTIVE_BG,bg=$COLOR_STATUS_BG,nobold,nounderscore,noitalics]"
# format of an inactive "tab"
set -g window-status-format "#[fg=colour85,bg=$COLOR_STATUS_BG] #I #[fg=colour85,bg=$COLOR_STATUS_BG] #W #F"
#set -g window-status-last-style "fg=$COLOR_LAST_WINDOW,bold"
set -g window-status-last-style "fg=blue,bold"
# TODO add [#{window_panes}] if window has more than one pane

set -g status-left "#[fg=$COLOR_STATUS_LEFT_FG,bg=${COLOR_STATUS_LEFT_BG}] \
#S #[fg=${COLOR_STATUS_LEFT_BG},bg=$COLOR_STATUS_BG,nobold,nounderscore,noitalics]"
set -g status-right "\
#[fg=$COLOR_STATUS_RIGHT_BG,bg=${COLOR_STATUS_BG},nobold,nounderscore,noitalics]\
#[fg=$COLOR_STATUS_RIGHT_FG,bg=$COLOR_POWER_BG]\
#($HOME/.opt/battery)\
 \
#(tmux-mem-cpu-load -m 2 -a 0 -g 0)\
#[fg=$COLOR_STATUS_TTY_BG,bg=$COLOR_STATUS_RIGHT_BG]\
#[fg=$COLOR_STATUS_TTY_FG,bg=$COLOR_STATUS_TTY_BG]#{pane_tty} \
#[fg=$COLOR_STATUS_RIGHT_BG,bg=$COLOR_STATUS_TTY_BG]\
#[fg=$COLOR_STATUS_RIGHT_FG,bg=$COLOR_STATUS_RIGHT_BG]\
#(LC_ALL=hr_HR.UTF-8 /bin/date +"%%a") %Y.%m.%d  %H:%M:%S \
#[fg=colour190,bg=$COLOR_STATUS_RIGHT_BG,nobold,nounderscore,noitalics]\
#[fg=colour17,bg=colour190]\
#h"
############################################################################}}}
#				colors														{{{
###############################################################################
# colors of active and not active split border
set -g pane-active-border-fg red
set -g pane-border-fg white

# Copy mode colors (not searched text, jost part of the last and first line in copy mode)
set-window-option -g mode-fg "#000000"	# black
set-window-option -g mode-bg "#FD870D"	# orange
############################################################################}}}

# TODO rename session for root:
# if-shell "if [[ `id` -eq "root" ]]; then true; else false; fi" \
	# sleep 2; tmux rename-session "ROOT"
set -sg escape-time 0

#				Plugin configuration
###############################################################################
#		TPM							{{{
#######################################
# tmux plugin manager
# <prefix>I: install
# <prefix>U: update
# <prefix>Alt-u	remove plugins not on the list
####################################}}}
#		Resurecct					{{{
#######################################
# better shortcuts
# INFO XXX that dir needs to be cleaned manualy
#set -g @resurrect-dir '~/.tmux/resurrect' # default
set -g @resurrect-dir '~/.tmux/saved-sessions'
set -g @resurrect-capture-pane-contents 'on'
# resurrect Vim and NeoVim
# needs obssesion plugin and session.vim file must be present
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
# tmux-resurrect will now restore vim and neovim sessions if Session.vim file is present.
# INFO do a restore with tmux-resurrect (will restore ~/.tmux/$RESURRECT_DIR/last)
# INFO or with key: prefix + Ctrl-r (my is Ctrl+R)
# XXX:
unbind-key S	# default was switch-client
unbind-key -T prefix S	# default was switch-client
#set -g @resurrect-save 'S'
set -g @resurrect-save 'O' # XXX TODO: S
set -g @resurrect-restore 'R'
####################################}}}
#		Continuum					{{{
#######################################
# INFO: auto save/restore session saved with ressurect
# user just for auto-save
set -g @continuum-save-interval '2'		# in minutes, 0 to disable
#set -g @continuum-restore 'off'			# auto restore default: off
# Note: automatic restore happens exclusively on tmux server start. No other action (e.g. sourcing tmux.conf) triggers this.
####################################}}}

#				Plugin setup 												{{{
###############################################################################
# <prefix> I to install
set -g @plugin 'tmux-plugins/tpm'					# tmux plugin manager
#set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'		# restore sessions after reboot
set -g @plugin 'tmux-plugins/tmux-continuum'		# auto save session (and auto restore)
#set -g @plugin 'tmux-plugins/tmux-sessionist'

#set -g @plugin 'tmux-plugins/tmux-battery'			# doesn't work, my shell script is good enough
#set -g @plugin 'tmux-plugins/tmux-online-status'	# INFO it seems that it doesn't work with FreeBSD (always offline)
set -g @plugin 'tmux-plugins/tmux-copycat'			# highlighted search
set -g @plugin 'nhdaly/tmux-scroll-copy-mode'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
############################################################################}}}
# TODO restore zsh history
# TODO vim resurrect
#  vim: set ft=tmux ts=4 sw=4 tw=78 foldmethod=marker noet :
