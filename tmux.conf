# created 090907_01:02
# modified 091225_2243
# actually started using 160730
# by Johnny Sorocil, beerware licenced

#		generic settings												{{{
###########################################################################
set -g mouse on
#set -g mouse off 	# normal mouse copy&paste without holding shift key,
					# scrolling is little uglier (as in xterm/GNU screen)

# set -g default-terminal "screen-256color"
set -g default-terminal "xterm-256color"
set -g set-titles on					# set an xterm title
set -g set-titles-string "#S [#h] #W"	# session-name [host-short] program
# don't rename windows automatically when processes change
#(useful in a case of high CPU usage)
# set -g allow-rename off
# set -g allow-rename on

set -g base-index 1			# start window indexing at one instead of zero
set -g renumber-windows on	# auto renumber windows, so there is no gaps
							# (no more 1 2 3 6 7)

set -s escape-time 0			# Remove delay when pressing esc in Vim
set -g history-limit 100000
set -g display-time 2000		# timeout for messages [ms]

# set -gw xterm-keys on	# enable forwarding Shift-arrow keys (useful in Vim cmd mode)
						# XXX will fuckup urxvt+tmux

# set -g pane-border-status top		# enable titles for every pane/split
set -g pane-base-index 1

set -g monitor-activity on	#  Windows with activity are highlighted in the status line.
########################################################################}}}
#		keyboard shortcuts - generic									{{{
###########################################################################
# keyboard shortcuts help 			{{{
# bind is alias for bind-key
# bind -T <something>	bind without <prefix>
# bind -t {vi-edit,emacs-edit,vi-choice,emacs-choice,vi-copy,emacs-copy)
# bind -r
# bind -n	alias for "bind -T root"

# TL;DR:	bind -n C-t new-tab			# Ctrl-t
#			bind r		reload_conf		# <prefix>r

# in shell: tmux list-keys		# see all shortcuts
################################### }}}
unbind -a	# unbind all default keys
bind C-j send-prefix
set -g prefix C-j
#set -g prefix C-space
bind C-k send-prefix	# for multiplexed tmux sessions

bind b set status		# toggle status (tab) bar

bind r source-file ~/.tmux.conf \; display-message "Config reloaded"
#bind R refresh-client

bind : command-prompt

bind d detach-client
bind x kill-pane	# kill "split"
bind c kill-pane	# kill "split"	vim-compat
bind X kill-window	# kill "tab"
bind C kill-window	# kill "tab"	vim-compat
bind q confirm-before kill-session
bind Q confirm-before kill-server

bind o resize-pane -Z \; display-message "zoom"	# toggle zoom

bind n command-prompt -I '#W' "rename-window '%%'"
bind N command-prompt -I '#S' "rename-session '%%'"

# enable same keyboard input in multiple windows
bind E set synchronize-panes \; display-message "Multiple kbd input mode toggle"

# INFO <prefix>/ is now used for copycat search
bind '~' split-window "exec htop"

bind l clear-history
########################################################################}}}
#		keyboard shortcuts - tabs										{{{
###########################################################################
# INFO this will have funny behaviour when some process (eg. rm) is
# working in current tab:
bind -n C-t new-window -c '#{pane_current_path}'
# TODO 170629 : how to recognize shift key?
# bind -n C-T new-window -a	# open a new tab after the current tab

bind -n M-, prev
bind -n M-. next
bind -n M-/ last-window	# last used tab

bind -n M-< swap-window -t :-	# move "tab" to the left  Alt-Shift-,
bind -n M-> swap-window -t :+	# move "tab" to the right Alt-Shift-.

# INFO default shortcut: <prefix>N
bind -n M-1 select-window -t :1
bind -n M-2 select-window -t :2
bind -n M-3 select-window -t :3
bind -n M-4 select-window -t :4
bind -n M-5 select-window -t :5
bind -n M-6 select-window -t :6
bind -n M-7 select-window -t :7
bind -n M-8 select-window -t :8
bind -n M-9 select-window -t :9
bind -n M-0 select-window -t {end}
bind -n M-^ select-window -l	# last used tab
############################################################################}}}
#		keyboard shortcuts - splits										{{{
###########################################################################
# old keys for window splitting
unbind '"'
unbind '%'

bind s split-window -c '#{pane_current_path}'	# like Vim's C-w s
# This doesn't have much sense, but fuck it, it works
bind v split-window -h	# like vim's C-w v

# moving between panes with vim movement keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind w select-pane -l		# toggle between last and current
bind tab select-pane -l		# toggle between last and current
bind C-j select-pane -l		# toggle between last and current
bind T break-pane			# move buffer to a new tab
# bind t join-pane -t # TODO 170701

# switch panes using Alt-arrow without prefix
bind -n M-Left  select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up    select-pane -U
bind -n M-Down  select-pane -D
# switch panes using Alt-hjkl (faster than arrow keys)
bind -n M-H		select-pane -L
bind -n M-L		select-pane -R
bind -n M-K		select-pane -U
bind -n M-J		select-pane -D

# resize panes with vim movement keys
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# TODO 170628: resize panes with Alt-shift-arrow
############################################################################}}}
#		keyboard shortcuts - copy and paste								{{{
###########################################################################
# setw -g mode-keys vi		# use vi keybindings
set -g mode-keys vi		# use vi keybindings

# enter/exit							{{{
###########################################
# enter copy mode
bind y   copy-mode		# <prefix>y to enter copy mode
bind C-y copy-mode		# <prefix>Ctrl-y to enter copy mode
bind '\' copy-mode
# bind PageUp copy-mode -eu	# TODO 170628

# exit copy mode:
bind -T copy-mode-vi Escape send -X cancel	# q is default, still valid
bind -T copy-mode-vi C-c send -X cancel	# q is default, still valid

bind -T copy-mode C-Up   send -X scroll-up	 # like Ctrl-Y
bind -T copy-mode C-Down send -X scroll-down # like Ctrl-E
########################################}}}
# selecting text						{{{
###########################################
# space
# mouse select
bind -T copy-mode-vi 'v' send -X begin-selection
bind -T copy-mode-vi 'V' send -X select-line
# INFO use begin selection (v or space) before this:
bind -T copy-mode-vi 'C-v' send -X rectangle-toggle
# TODO 170628 bind Ctrl-V to begin-selection ; rectangle-toggle
# bind -T copy-mode 'C-v' send -X begin-selection \; rectangle-toggle


########################################}}}
# copying								{{{
###########################################
# copy to tmux buffer:
bind -T copy-mode-vi y send -X copy-selection
# bind -T copy-mode y send -X copy-selection-and-cancel
# copy to X11 1st:
# - mouse + shift key
bind -T copy-mode-vi Y   send -X copy-pipe "xclip -selection clipboard -i"
bind -T copy-mode-vi C   send -X copy-pipe "xclip -selection primary -i"
# bind -T copy-mode-vi C-C send -X copy-pipe "xclip -selection primary -i"
# bind -T copy-mode-vi C-C send -X copy-pipe-and-cancel "xclip -selection primary -i"
# copy to X11 2nd:
bind -T copy-mode-vi c   send -X copy-pipe "xclip -selection clipboard -i"
# bind -T copy-mode-vi C-c send -X copy-pipe "xclip -selection clipboard -i"
########################################}}}
# pasting								{{{
###########################################
# xclip: better to use "clipboard" than "secondary"
bind Space choose-buffer		# chose "history" from tmux paste buffer
bind p paste-buffer				# paste from tmux default buffer, the buffer when selecting with mouse (without shift key)
unbind P
bind P run "xclip -o -sel clipboard | tmux load-buffer - ; tmux paste-buffer" \; display-message "pasted from X11 2nd buffer (clipboard)"
bind [ run "xclip -o -sel primary | tmux load-buffer - ; tmux paste-buffer" \; display-message "pasted from X11 1st buffer"
# copy from vim to tmux buffer without entering tmux copy mode
bind { load-buffer /tmp/vim_buffer \; paste-buffer \; display-message "pasted from Vim buffer"
########################################}}}

# TODO 160600: don't exit copy mode after yank
#				(this is unsupported in tmux 2.3)
# TODO remove '\n' when pasting
# TODO 170628 remove trailing spaces when coping or pasting
# TODO " for named buffers
########################################################################}}}

#		mouse															{{{
###########################################################################
bind m set -g mouse on  \; display-message	"Mouse ON"
bind M set -g mouse off \; display-message	"Mouse OFF"
########################################################################}}}
# view URL (needs urlview package), multiple steps need to open URL
bind u capture-pane \; save-buffer /tmp/tmux-buffer \; new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'
# TODO tmux-open plugin
###########################################################################
#				status bar												{{{
###########################################################################
# started as CP from vim-airline plugin with some changes
set -g status on
# set -g status off
set -g status-interval 1
set -g status-justify left
set -g status-keys emacs
set -g status-left-length 100
set -g status-left-style default
set -g status-position bottom
set -g status-right-length 100
set -g status-right-style default
set -g status-style fg=black,bg=colour234	# otherwise the window bar bg would be green

# set -g window-style default
# set -g window-status-activity-style fg=colour190,bg=colour234
# set -g window-status-bell-style reverse
# #set -g window-status-current-style default
# #set -g window-status-last-style default
# set -g window-status-separator ""
# set -g window-status-style fg=colour85,bg=colour234

COLOR_STATUS_BG="colour234"
COLOR_STATUS_LEFT_BG="colour33"
COLOR_STATUS_LEFT_FG="colour0"		# black
COLOR_STATUS_RIGHT_BG="colour238"
COLOR_STATUS_RIGHT_FG="colour15"	# white
COLOR_WINDOW_ACTIVE_BG="colour190"	# default was 238
COLOR_WINDOW_ACTIVE_FG="colour232"
COLOR_POWER_BG=$COLOR_STATUS_RIGHT_BG
COLOR_STATUS_TTY_BG="colour202"
COLOR_STATUS_TTY_BG="colour88"
COLOR_STATUS_TTY_FG="colour15"
COLOR_LAST_WINDOW="colour15"

# active "tab"
set -g window-status-current-format "#[fg=${COLOR_STATUS_BG},bg=$COLOR_WINDOW_ACTIVE_BG,nobold,nounderscore,noitalics]#[fg=$COLOR_WINDOW_ACTIVE_FG,bg=$COLOR_WINDOW_ACTIVE_BG] #I #[fg=colour255,bg=COLOR_WINDOW_ACTIVE_BG] #W #[fg=$COLOR_WINDOW_ACTIVE_BG,bg=$COLOR_STATUS_BG,nobold,nounderscore,noitalics]"
# format of an inactive "tab"
set -g window-status-format "#[fg=colour85,bg=$COLOR_STATUS_BG] #I #[fg=colour85,bg=$COLOR_STATUS_BG] #W #F"
#set -g window-status-last-style "fg=$COLOR_LAST_WINDOW,bold"
set -g window-status-last-style "fg=blue,bold"
# TODO add [#{window_panes}] if window has more than one pane

set -g status-fg white
set -g status-bg black

# bolje da diretno pisu boje u statusima, nego da je COLOR_BG_LEFT (lakse za skuzit sto se dogadja)
COLOR_YELLOW="colour190"
COLOR_BLACK="colour232"
COLOR_ORANGE="colour202"
COLOR_GRAY="colour238"
# COLOR_WHITE="colour255"
COLOR_WHITE="colour15"
COLOR_RED="colour5"
COLOR_RED="colour196"
COLOR_GRAY_DARK="colour234"
COLOR_BLUE="colour33"
COLOR_GREEN="colour76"
# INFO colors (bg and fg) bust be under the same parentheses
#      - it's will not work it there are
#        COLOR_BG_SOMETHING  and COLOR_FG_SOMETHING

STATUS_BATTERY="#[bg=$COLOR_GRAY_DARK, fg=$COLOR_GRAY]#[bg=$COLOR_GRAY, fg=$COLOR_WHITE]#(/opt/scripts/battery tmux)#[fg=$COLOR_ORANGE, bg=$COLOR_GRAY] "
# STATUS_PTS="#(tty | cut -d '/' -f 4)"	# returns "not a tty", works in shell
# STATUS_PTS="#(echo $TTY)"	# nothing
STATUS_PTS="#[fg=$COLOR_WHITE,bg=$COLOR_ORANGE]#{pane_tty}#[bg=$COLOR_ORANGE, fg=$COLOR_YELLOW] "
STATUS_HOSTNAME="#[bg=colour190, fg=colour238]#h#[fg=$COLOR_GRAY,bg=$COLOR_YELLOW]" # nece moc elegantnije od ovog
STATUS_DATE="#[bg=$COLOR_GRAY, fg=$COLOR_WHITE]#(LC_ALL=hr_HR.UTF-8 /bin/date +"%%a") %y.%m.%d"
STATUS_HOUR="#[bg=$COLOR_GRAY, fg=$COLOR_WHITE]  \
#[bg=$COLOR_GRAY, fg=$COLOR_WHITE]#(LC_ALL=hr_HR.UTF-8 /bin/date +"%")%H:%M:%S"


set -g status-left "#[fg=$COLOR_STATUS_LEFT_FG,bg=${COLOR_STATUS_LEFT_BG}] \
		#S #[fg=${COLOR_STATUS_LEFT_BG},bg=$COLOR_STATUS_BG,nobold,nounderscore,noitalics]"
# root will have red bg for session name:
if-shell 'whoami | grep root' 'set -g status-left "#[fg=$COLOR_STATUS_LEFT_FG,bg=${COLOR_RED}] \
		#S #[fg=${COLOR_RED},bg=$COLOR_STATUS_BG,nobold,nounderscore,noitalics]"'

# $STATUS_BATTERY
# $STATUS_PTS
# $STATUS_HOSTNAME
set -g status-right "\
$STATUS_DATE\
$STATUS_HOUR"

# testing for variable length of status bar:
# if-shell 'if [ "$COLUMNS" -gt 100 ] ; then true ; false; fi' 'display-message "vece je od 100"' 'display-message "manje"'
############################################################################}}}
#				colors													{{{
###########################################################################
# colors of active and not active split border
set -g pane-active-border-fg red
set -g pane-border-fg white

# Copy mode colors (not searched text, jost part of the last and first line in copy mode)
set-window-option -g mode-fg "#000000"	# black
set-window-option -g mode-bg "#FD870D"	# orange
#########################################################################}}}

# auto rename session for root
# if-shell 'whoami | grep root' 'rename-session "ROOT"' ''
if-shell 'whoami | grep root' 'rename-session "ROOT"'
# XXX 170709 won't work until cofnig is reloaded

set -sg escape-time 0

# replace italic control characters with reverse
# set -g terminal-overrides 'rxvt-unicode*:sitm@,ritm@'
# set -g terminal-overrides 'xterm*:sitm@,ritm@'
# try to higlight search
# set -g terminal-overrides "screen.xterm-new"

# To allow xterm titles in terminal window, you also need to add the XT flag, something like this:
# smcup and rmcup are older options for something, only XT is important for titles
# set -g terminal-overrides "xterm*:XT:smcup@:rmcup@"
#				Plugin configuration									{{{
###########################################################################
#		TPM							{{{
#######################################
# tmux plugin manager
# <prefix>I: install
# <prefix>U: update
# <prefix>Alt-u	remove plugins not on the list
####################################}}}
#		Resurecct					{{{
#######################################
# better shortcuts
# INFO XXX that dir needs to be cleaned manualy
#set -g @resurrect-dir '~/.tmux/resurrect' # default

set -g @resurrect-dir '~/.tmux/saved-sessions'
set -g @resurrect-capture-pane-contents 'on'

# save zsh and bash history:
set -g @resurrect-save-shell-history 'on'

# resurrect Vim and NeoVim
# INFO needs obssesion plugin and session.vim file must be present
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
# tmux-resurrect will now restore vim and neovim sessions if Session.vim file is present.

# INFO restore with tmux-resurrect (will restore ~/.tmux/$RESURRECT_DIR/last)
# unbind old <prefix>S key:
unbind-key S	# default was switch-client
unbind-key -T prefix S	# default was switch-client
set -g @resurrect-save 'S'
# XXX 170729 jebote Isus sveti:
set -g @resurrect-restore 'R'
####################################}}}
#		Continuum					{{{
#######################################
# INFO: auto save/restore session saved with ressurect
# used just for auto-save (if enabled)

set -g @continuum-save-interval '10'		# in minutes, 0 to disable
#set -g @continuum-restore 'off'			# auto restore default: off
# Note: automatic restore happens exclusively on tmux server start.
#       No other action (e.g. sourcing tmux.conf) triggers this.
####################################}}}
#		copycat						{{{
#######################################
# INFO: This plugin enables:
#       regex searches
#       search result highlighting
#       predefined searches

####################################}}}
########################################################################}}}
#				Plugins 	 											{{{
###########################################################################
# <prefix> I to install
# <prefix> U to update
set -g @plugin 'tmux-plugins/tpm'					# tmux plugin manager
#set -g @plugin 'tmux-plugins/tmux-sensible'
#set -g @plugin 'tmux-plugins/tmux-resurrect'		# restore sessions after reboot
# set -g @plugin 'tmux-plugins/tmux-continuum'		# auto save session (and auto restore)
#set -g @plugin 'tmux-plugins/tmux-sessionist'

#set -g @plugin 'tmux-plugins/tmux-battery'			# doesn't work, my shell script is good enough
#set -g @plugin 'tmux-plugins/tmux-online-status'	# INFO it seems that it doesn't work with FreeBSD (always offline)
set -g @plugin 'tmux-plugins/tmux-copycat'			# highlighted search
set -g @plugin 'nhdaly/tmux-scroll-copy-mode'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
########################################################################}}}
# TODO restore zsh history

# INFO vim resurect works, but vim must save Session.vim in current dir to work
# TODO 170701 auto-delete old session files

# TODO one day (unsupported):
	# highlight searched item
	# show search 123 of 456
#  vim: set ft=tmux ts=4 sw=4 tw=78 foldmethod=marker noet :
