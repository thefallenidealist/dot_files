# INFO to view options: git config --list (or -l)
# vim: set ft=gitconfig ts=4 sw=4 tw=0 fdm=manual noet :

[include]
	path = ~/.gitconfig_local
	# path = ~/github-private/.gitconfig-private

# 200204: must be before [include]
# [includeIf "gitdir:~/github-private/"]
	# path = ~/github-private/.gitconfig-private


[core]
	pager = less -F -X
	# autocrlf = false	# 181127 work PC
	# autocrlf=true

[alias]
	# private = config user.email "me@private-mail.com"
	s = status
	sn = status -uno
	si = status --ignored
	# ! means pass the whole line to the shell
	; s = !git remote get-url origin && git status	# TODO posao
	co = checkout
	com = checkout master
	br = branch
	# br = branch --sort=committerdate	# 181127 work PC
	br2 = for-each-ref --sort=committerdate refs/heads/ --format='%(committerdate:short) %(refname:short)'
	a = add
	au = add -u
	cl = clone
	su = submodule update --init --recursive
	last = log -1 HEAD
	l = log --decorate
	c = commit
	cm = commit --allow-empty-message -m
	cc = commit						# same as vim fugitive plugin
	ca = commit --amend				# same as vim fugitive plugin
	ce = commit --amend --no-edit	# same as vim fugitive plugin
	rc = rebase --continue
	ra = rebase --abort
	mc = merge --continue
	ma = merge --abort
	cp  = cherry-pick
	cpc = cherry-pick --continue
	cpa = cherry-pick --abort
	ls = diff --name-only			# only show filenames of changed files between commits
	ls2 = ls-files					# list tracked files
	st = stash
	sh = stash
	sp = stash pop
	ss = stash show
	d = diff
	dc = diff --cached
	dd = diff --submodule
	dhh = diff HEAD^ HEAD
	shh = show HEAD^ HEAD
	dd0 = foreach --recursive git diff
	dd1 = foreach --recursive git diff --name-status
	dt = difftool
	lol = log --graph --branches --remotes --pretty=oneline --abbrev-commit
	lsh = log --graph --branches --remotes --pretty=short --abbrev-commit
	ll  = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%C('blue bold')\\ [%cn]" --decorate --date=relative
	ll  = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%C(red)%d\\ %C(reset)%s%C('blue bold')\\ [%cn]" --decorate --date=relative
	# ll2 = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%C('blue bold')\\ [%cn] %Cred%d\\ %creset" --decorate --date=relative
	ap = apply --ignore-space-change --ignore-whitespace
	ap2 = apply --reject --whitespace=fix
	app = apply --reject --whitespace=fix
	blame2 = log -p -M --follow --stat --	# nicely show changests and commit messages throught whole history for selected file

	brc = rev-parse --abbrev-ref HEAD   # show only current branch
	# pusho = push --set-upstream origin $(git rev-parse --abbrev-ref HEAD) # TODO push current branch which doesn't exists on remote

[log]
	decorate = full
	# decorate with branch pointers
	# decorate = short	# 181127 posao
[color]
	ui = auto
	# ui = always	# INFO 200824: don't use it, it will break redirection to file and git diff plugins (GitMessenger)
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = cyan bold
[color "status"]
	added = yellow
	changed = cyan
	#untracked = magenta
	untracked = red

[apply]
	whitespace = nowarn

[diff]
	submodule=diff


# examples
# change remote:
# git remote set-url origin https://github.com/user/project
#
# resync fork
# git remote add upstream https://github.com/user/project
# git fetch upstream
# git pull upstream master
