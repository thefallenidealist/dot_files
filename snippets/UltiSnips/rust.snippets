# Created 17.08.13. 21:09 by Johnny Sorocil.
# vim: set ft=snippets ts=4 sw=4 tw=0 fdm=marker noet :
# mostly copied and then modified
# from https://github.com/honza/vim-snippets/blob/master/snippets/rust.snippets

#	functions																{{{
################################################################################
snippet fn "Function definition"
fn ${1:function_name}(${2})${3}
{
	${0}
}
endsnippet

snippet pfn "pub fn"
pub fn ${1:function_name}(${2})${3}
{
	${0}
}
endsnippet

snippet main "fn main()"
fn main()
{
	${0}
}
endsnippet

snippet new "Constructor function"
pub fn new(${2}) -> ${1:Name}
{
	$1
	{
		${3}
	}
}
endsnippet
############################################################################ }}}
#	println!																{{{
################################################################################
snippet pri "print!"
print!("${1}");
endsnippet

snippet pri, "print! with format param"
print!("${1}{${2}}", ${3});
endsnippet

snippet pln "println!"
println!("${1}");
endsnippet

# same as above
snippet println "println!"
println!("${1}");
endsnippet

snippet pln, "println! with format param"
println!("${1}{${2}}", ${3});
endsnippet

# same as above
snippet println, "println! with format param"
println!("${1}{${2}}", ${3});
endsnippet

snippet fmt "format!"
format!("${1}{${2}}", ${3});
endsnippet
############################################################################ }}}
#	var																		{{{
################################################################################
snippet let "let variable declaration with type inference"
let ${1} = ${2};
endsnippet

snippet lett "let variable declaration with explicit type annotation"
let ${1}: ${2} = ${3};
endsnippet

snippet letm "let mut variable declaration with type inference"
let mut ${1} = ${2};
endsnippet

snippet lettm "let mut variable declaration with explicit type annotation"
let mut ${1}: ${2} = ${3};
endsnippet

snippet const "const var with type"
const ${1:Name}: ${2:Type} = ${3:Value};
endsnippet

snippet const_new "const var with type and constructor"
const ${1:Name}: ${2:Type} = $2::new(${3});
endsnippet
############################################################################ }}}
#	Common types															{{{
################################################################################
snippet opt "Option<T>"
Option<${1:i32}>
endsnippet

snippet res "Result<T, E>"
Result<${1:~str}, ${2:()}>
endsnippet
############################################################################ }}}
#	Control Structures														{{{
################################################################################
snippet if
if ${1}
{
	${0:${VISUAL}}
}
endsnippet

snippet ife "if / else"
if ${1}
{
	${2:${VISUAL}}
}
else
{
	${0}
}
endsnippet

snippet el "else"
else
{
	${0:${VISUAL}}
}
endsnippet

snippet eli "else if"
else if ${1}
{
	${0:${VISUAL}}
}
endsnippet

snippet mat "match pattern"
match ${1}
{
	${2} => ${3}
}
endsnippet

snippet case "Case clause of pattern match"
${1:_} => ${2:expression}
endsnippet

snippet loop "loop {}" b
loop
{
	${0:${VISUAL}}
}
endsnippet

snippet wh "while loop"
while ${1:condition}
{
	${0:${VISUAL}}
}
endsnippet

snippet for "for ... in ... loop"
for ${1:i} in ${2}
{
	${0}
}
endsnippet

############################################################################ }}}
