#!/bin/sh
# vim: set ft=sh ts=4 sw=4 tw=0 fdm=marker noet :
# Created 180922
# INFO installs user dot files and links it with SRC

# TODO 181020 check if installed: python pip
#				vim snippets
# TODO 181023: To find out ThinkPad name (and patch for bad keyboard layout): dmidecode -s system-version: ThinkPad T430s
				# patch ~/.xmodmap or include/append ~/.xmodmap.t430s?

OS=$(uname)
if [ "$OS" = "FreeBSD" ] ; then
	PIP="pip-3.6"
	FILE_ZSH_LOCAL=zshrc_bsd
elif [ "$OS" = "Linux" ] ; then
	PIP="pip"
	FILE_ZSH_LOCAL=zshrc_linux
fi
PROGRAMS="zsh tmux nvim xrdb xmodmap git"
# Linux: apt-get install curl fonts-powerline

IS_WORK_PC=$(is_work_pc 2>/dev/null)

if [ "$IS_WORK_PC" != "1" ] ; then
	echo "nije work PC"
	FILE_GITCONFIG_LOCAL="gitconfig_github"
fi

# set dir (basedir/pwd)														{{{
# -----------------------------------------------------------------------------
set_dir()
{
	# BASEDIR is used instead of PWD so script can be run from other dirs
	BASEDIR=$(dirname "$0")
	if [ "$BASEDIR" = "." ] ; then
		BASEDIR=$PWD	# case when script is run from cwd with ./
	fi
}
# ------------------------------------------------------------------------- }}}
# print debug informations													{{{
# -----------------------------------------------------------------------------
print_debug()
{
	echo "BASEDIR $BASEDIR"
	echo "PWD: $PWD"
	echo "CWD: $CWD"
	echo "IS_WORK_PC: $IS_WORK_PC"
} #------------------------------------------------------------------------ }}}
# usage																		{{{
# -----------------------------------------------------------------------------
usage()
{
	echo "Script for installing dot files for fresh user"
	echo "Usage: $progname"
	echo "  -h --help"
	echo "  -r --remove | remove old files before installing new"
	echo "  -t          | check if all needed programs are installed"
} #------------------------------------------------------------------------ }}}
# remove files																{{{
# -----------------------------------------------------------------------------
remove_files()
{
	rm -rf \
		$HOME/.zshrc \
		$HOME/.zshrc_local \
		$HOME/.tmux.conf \
		$HOME/.vim \
		$HOME/.fzf* \
		$HOME/.Xdefaults \
		$HOME/.config/nvim \
		$HOME/.xmodmap \
		$HOME/.xinitrc \
		$HOME/.config/openbox \
		$HOME/.config/tint2 \
		$HOME/.config/mpv
	# rm -rf $HOME/.local
}
# ------------------------------------------------------------------------- }}}
# install vim																{{{
# -----------------------------------------------------------------------------
install_vim()
{
	mkdir -p $HOME/.vim/autoload
	mkdir -p $HOME/.vim/backup
	mkdir -p $HOME/.config/nvim
	ln -sf $HOME/.vim/autoload	$HOME/.config/nvim/
	ln -sf $HOME/.vim/vimrc		$HOME/.vimrc			# .vimrc -> .vim/vimrc

	ln -sf $BASEDIR/vimrc		$HOME/.vim/vimrc
	ln -sf $BASEDIR/vimrc		$HOME/.config/nvim/init.vim
	ln -sf $BASEDIR/snippets	$HOME/.vim
	if [ "$FAST" != "y" ] ; then
		$PIP install --user neovim
		nvim +PlugInstall +qall
	fi
}
# ------------------------------------------------------------------------- }}}
# install dot files															{{{
# -----------------------------------------------------------------------------
install_dot()
{
	ln -sf $BASEDIR/tmux.conf				$HOME/.tmux.conf
	ln -sf $BASEDIR/zshrc					$HOME/.zshrc
	ln -sf $BASEDIR/$FILE_ZSH_LOCAL			$HOME/.zshrc_local
	ln -sf $BASEDIR/gitconfig				$HOME/.gitconfig
	ln -sf $BASEDIR/$FILE_GITCONFIG_LOCAL	$HOME/.gitconfig_local
	ln -sf $BASEDIR/ripgreprc				$HOME/.ripgreprc
	ln -sf $BASEDIR/lesskey					$HOME/.lesskey
	lesskey									$HOME/.lesskey	# generate ~/.less which is binary representation used by less(1)
	# install tmux plugin:
	git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
}
# ------------------------------------------------------------------------- }}}
# GUI config                                                                {{{
# -----------------------------------------------------------------------------
install_gui()
{
	# $UID doesn't work in /bin/sh
	# $UID won't work in bash (because Linux /bin/sh)
	USER_ID=$(id -u)

	# for non-root users only:
	if [ "$USER_ID" != "0" ]; then
		ln -sf $BASEDIR/gui/Xdefaults	$HOME/.Xdefaults
		ln -sf $BASEDIR/gui/xmodmap		$HOME/.xmodmap		# TODO 190730: Linux needs patched xmodmap
		ln -sf $BASEDIR/gui/xinitrc		$HOME/.xinitrc
		ln -sf $BASEDIR/gui/xbindkeysrc	$HOME/.xbindkeysrc
		mkdir -p $HOME/.config
		ln -sf $BASEDIR/gui/openbox		$HOME/.config
		ln -sf $BASEDIR/gui/tint2		$HOME/.config
		ln -sf $BASEDIR/gui/mpv			$HOME/.config
		# TODO 191124: how to install mpv scripts?
		ln -sf $BASEDIR/gui/gtkrc-2.0	$HOME/.gtkrc-2.0
		ln -sf $BASEDIR/gui/gtkrc.mine	$HOME/.gtkrc.mine
		ln -sf $BASEDIR/gui/gtk3.ini	$HOME/.config/gtk-3.0/settings.ini
		ln -sf $BASEDIR/gui/zathurarc	$HOME/.config/zathura/
		ln -sf $BASEDIR/gui/tridactylrc	$HOME/.tridactylrc

		xrdb		$HOME/.Xdefaults
		xmodmap		$HOME/.xmodmap
		xbindkeys	$HOME/.xbindkeysrc
	else
		echo "This is root, no X11 conf needed"
	fi
} # ----------------------------------------------------------------------- }}}
# check programs															{{{
# -----------------------------------------------------------------------------
check_programs()
{
	echo "Checking if these programs are available: $PROGRAMS"

	for i in $PROGRAMS ; do
		command -v $i > /dev/null;
		ret=$?
		if [ "$ret" = "0" ]; then
			echo "Command \"$i\" found"
		else
			echo "Command \"$i\" not found!"
		fi
	done
}
# ------------------------------------------------------------------------- }}}

main()
{
	while [ "$1" != "" ]; do
		PARAM=$1
		case $PARAM in
			-h | --help)
				usage
				exit
				;;
			-r | --remove)
				REMOVE="y"
				;;
			-f | --fast)
				FAST=y
				;;
			-t)
				check_programs
				exit
				;;
			*)
				echo "ERROR: unknown parameter \"$PARAM\""
				usage
				exit 1
				;;
		esac
		shift
	done

	if [ "$REMOVE" = "y" ] ; then
		echo "Removing files"
		remove_files
	fi

	set_dir
	# print_debug
	install_vim
	install_dot
	install_gui
	check_programs
}

main "${@}"
